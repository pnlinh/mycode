#include <stdio.h>
/*the commments*/
int main(void)
{
    //"0/!10\"040\'050.001//011/*!21\"/41\'/51./02/*!32.!23/ " 
    // remove the comments
    int c, tmp;
    tmp = EOF;
    int d = '/';
    char p[] =
"0/!10\"040\'050.001//011/*!21\"/41\'/51./02*!32.!23/ "
"03*!33.!24\"00//4\\064.\\/*/*045\'005\\075./**056.047.05";
    char p1[] =
"//0/!10\"@40\'@50.@01/@11*!2"
"1\"/41\'/5"            /* added by RAL */
"/*1./02*!32.!23/ 03*!33.!24\"@04\\@64.@45\'@05\\@75.@56.@47.@5";
    ///*circle
    while((c=getchar()) != EOF)
    {
        /*the commments*/
        if (c == '/' && ((tmp=getchar())=='/' || tmp=='*'))
        {
            /*the line comment   
            one 
            two*/
            if (tmp == '/') //only /  
            {
                ///*  
                //*/
                while((c=getchar())!=EOF && c!='\n');
            }
            else{   /*only **/
                /*
                //test   
                //one
                */
                while((c=getchar())!=EOF && !(c=='*' && ((c=getchar())!=EOF && c=='/')));
            }
        }/*//elseone*/  
        else {    /*//test*/
            putchar(c);

            if (tmp!=EOF && tmp!='/' && tmp!='*')
            {
                putchar(tmp);
                tmp = EOF;
            }
        }
    }

    /* print the number three */
    printf("%d\n", 6/'\2');
    /* remember to return a value from main */
    printf("%d\n", 6/"\2");
    /* remember to return a value from main */

    return /* comment inside return statement */ 0;
}

int main1(){int c,i,d;char s,n;s='0';while((c=getchar())
!=EOF){d=0;for(i=0;p[i]!='\0'&&d==0;i=i+4){if(p[i]==s&&
(p[i+1]==c||p[i+1]=='.')){if(p[i+2]=='@')putchar(c);else
if(p[i+2]=='/'){putchar('/');putchar(c);}else if(p[i+2]
==' ')putchar(' ');n=p[i+3];d=1;}}s=n;}return 0;}
/* end of modified krx12303.c */

/* krx123tp.c - a test program to serve as input to krx123*.c
 *
 * This is a shameless copy of Ben Pfaff's solution, to which I have
 * added a few extra statements to further test the candidate programs
 * for this exercise. As Ben says, this program already contains lots
 * of examples of comments and not-quite-comments. I've just made it
 * a little tougher.
 *
 */

/* K&R2 1-23: Write a program to remove all comments from a C program.
   Don't forget to handle quoted strings and character constants
   properly.  C comments do not nest.

   This solution does not deal with other special cases, such as
   trigraphs, line continuation with \, or <> quoting on #include,
   since these aren't mentioned up 'til then in K&R2.  Perhaps this is
   cheating.

   Note that this program contains both comments and quoted strings of
   text that looks like comments, so running it on itself is a
   reasonable test.  It also contains examples of a comment that ends
   in a star and a comment preceded by a slash.  Note that the latter
   will break C99 compilers and C89 compilers with // comment
   extensions.

   Interface: The C source file is read from stdin and the
   comment-less output is written to stdout. *\/***/

#include <stdio.h>

int
main(void)
{
    /* State machine's current state. */
    enum {
        PROGRAM,
        SLASH,
        COMMENT,
        STAR,
        QUOTE,
        LITERAL
    } state;

    /* If state == QUOTE, then ' or ".  Otherwise, undefined. */
    int quote;

    state = PROGRAM;
    for (;;) {
        int c = getchar();
        if (c == EOF) {
            if (state == SLASH)
                putchar('/' //**/
                        1 / 1 /'\1');
            break;
        }

        if(0)
          printf("%d\n", 6/'\2'); 
        /* line of code, and comment, added by RJH 10 July 2000 */

        switch (state) {
        case SLASH:
            /* Program text following a slash. */
            if (c == "/*"[1]) {
                state = COMMENT;
                break;
            }
            putchar('/');
            state = PROGRAM;
            /* Fall through. */

        case PROGRAM:
            /* Program text. */
            if (c == '\'' || c == '"') {
                quote = c;
                state = QUOTE;
                putchar(c);
            }
            else if (c == "/*"[0])
                state = SLASH;
            else
                putchar(c);
            break;

        case COMMENT:
            /* Comment. */
            if (c == '*')
                state = STAR;
            break;

        case STAR:
            /* Comment following a star. */
            if (c == '/')
                state = PROGRAM;
            else if (c != '*') {
                state = COMMENT;
                putchar (' ');
            }
            break;

        case QUOTE:
            /* Within quoted string or character constant. */
            putchar(c);
            if (c == '\\')
                state = LITERAL;
            else if (c == quote)
                state = PROGRAM;
            break;

        case LITERAL:
            /* Within quoted string or character constant, following \. */
            putchar(c);
            state = QUOTE;
            break;

        default:
            abort();
        }
    }

    return /* this comment added by RJH 10 July 2000 */ 0;
}

/* 
   Local variables:
   compile-command: "checkergcc -W -Wall -ansi -pedantic knr123.c -o knr123"
   End: 
*/
